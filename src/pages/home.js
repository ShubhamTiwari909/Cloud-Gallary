import Head from 'next/head'
import { useState, useEffect } from 'react'
import { getId, addTask, updateTask, deleteTask, getData, getCompleted } from '../../firebase/dbOperations'
import { useRouter } from 'next/router'

import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

import Navbar from '../../components/Navbar'
import Search from '../../components/Search'
import Form from '../../components/Form'
import Display from '../../components/Display'
// import Toggle from '../../components/mini-components/Toggle'
// import { darkMode } from '../../methods/Darkmode';


export default function Home() {

  // For date input
  var curr = new Date();
  curr.setDate(curr.getDate());
  var date = curr.toISOString().substring(0, 10);
  //states
  const [tokenId, setTokenId] = useState(null);
  const [title, setTitle] = useState("")
  const [task, setTask] = useState("")
  const [priority, setPriority] = useState("P1")
  const [deadline, setDeadline] = useState(date)
  const [completed, setCompleted] = useState(false)
  const [file, setFile] = useState("");
  const [url, setUrl] = useState({});
  const [percent, setPercent] = useState(0)
  const [taskGroup, setTaskGroup] = useState([])
  const [update, setUpdate] = useState(false)
  const [updateId, setUpdateId] = useState(null)
  const [search, setSearch] = useState("");
  const [searchCompleted, setSearchCompleted] = useState("All");


  const [menu, setMenu] = useState(false)
  const router = useRouter()

  /* Checking if the user is logged in or not. If not, it will redirect to the Login page. */
  useEffect(() => {
    let token = sessionStorage.getItem("Token")
    setTokenId(token)
    if (token) {
      getData(setTaskGroup)
      toast.info('Welcome')
    }
    if (!token) {
      router.push("/")
    }
  }, [])


  return (
    <div className={`min-h-screen`}>
      <Head>
        <title>Next Firebase Todo App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* NAVBAR */}
      <ToastContainer position="top-right"
        autoClose={3000}
        newestOnTop={true}
        closeOnClick
        theme="colored"
      />
      <Navbar tokenId={Boolean(tokenId)} />

      <main>
        {/* <Toggle toggle={toggle} setToggle={setToggle} onClick={() => darkMode(setToggle)} /> */}
        <div className='p-fixed z-100 bottom-0 w-full'>
          <div className='m-l-16 m-b-10'>
            <button className="menu" onClick={() => setMenu(!menu)}>Add or Search</button>
          </div>
          <div className="h-center">
            <div className={`formContainer`} style={{ display: menu ? "block" : "none" }}>
              <section className={`h-center`}>
                {/* ADD TASK FORM */}
                <Form
                  update={update}
                  setUpdate={setUpdate}
                  title={title}
                  setTitle={setTitle}
                  task={task}
                  setTask={setTask}
                  priority={priority}
                  setPriority={setPriority}
                  deadline={deadline}
                  setDeadline={setDeadline}
                  file={file}
                  setFile={setFile}
                  setUrl={setUrl}
                  percent={percent}
                  setPercent={setPercent}
                  setMenu={setMenu}
                  addTask={(e) => addTask(e, title, setTitle, task, setTask, priority, setPriority, deadline, setDeadline, completed, setCompleted, url, setUrl,file,setFile,setPercent, setTaskGroup)}
                  updateTask={(e) => {
                    updateTask(e, title, setTitle, task, setTask, priority, setPriority, deadline, setDeadline, url, setUrl,file,setFile,setPercent, setUpdateId, setUpdate, setTaskGroup, updateId)
                    window.scrollTo(0, window.innerHeight)
                  }}
                />
              </section>
              {/* SEARCH FORM */}
              <Search search={search} setSearch={setSearch} searchCompleted={searchCompleted} setSearchCompleted={setSearchCompleted} />
            </div>
          </div>
        </div>

        {/* READ TASKS */}
        <section>
          <Display
            taskGroup={taskGroup}
            setTitle={setTitle}
            setTask={setTask}
            setPriority={setPriority}
            setDeadline={setDeadline}
            setUrl={setUrl}
            setCompleted={setCompleted}
            setTaskGroup={setTaskGroup}
            setUpdate={setUpdate}
            setUpdateId={setUpdateId}
            search={search}
            searchCompleted={searchCompleted}
            getId={getId}
            setMenu={setMenu}
            deleteTask={deleteTask}
            getCompleted={getCompleted}
          />
        </section>

      </main>
    </div>
  )
}
